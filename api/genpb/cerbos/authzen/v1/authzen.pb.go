// Copyright 2021-2025 Zenauth Ltd.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        (unknown)
// source: cerbos/authzen/v1/authzen.proto

package authzenv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Subject represents the AuthZEN subject entity.
type Subject struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Arbitrary key-value properties attached to the subject.
	Properties *structpb.Struct `protobuf:"bytes,1,opt,name=properties,proto3" json:"properties,omitempty"`
	// Subject type, e.g. "user".
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Subject identifier.
	Id            string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Subject) Reset() {
	*x = Subject{}
	mi := &file_cerbos_authzen_v1_authzen_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Subject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subject) ProtoMessage() {}

func (x *Subject) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_authzen_v1_authzen_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subject.ProtoReflect.Descriptor instead.
func (*Subject) Descriptor() ([]byte, []int) {
	return file_cerbos_authzen_v1_authzen_proto_rawDescGZIP(), []int{0}
}

func (x *Subject) GetProperties() *structpb.Struct {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *Subject) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Subject) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Action represents the AuthZEN action entity.
type Action struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Arbitrary key-value properties attached to the action.
	Properties *structpb.Struct `protobuf:"bytes,1,opt,name=properties,proto3" json:"properties,omitempty"`
	// Action name, e.g. "view".
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Action) Reset() {
	*x = Action{}
	mi := &file_cerbos_authzen_v1_authzen_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_authzen_v1_authzen_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action.ProtoReflect.Descriptor instead.
func (*Action) Descriptor() ([]byte, []int) {
	return file_cerbos_authzen_v1_authzen_proto_rawDescGZIP(), []int{1}
}

func (x *Action) GetProperties() *structpb.Struct {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *Action) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Resource represents the AuthZEN resource entity.
type Resource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Arbitrary key-value properties attached to the resource.
	Properties *structpb.Struct `protobuf:"bytes,1,opt,name=properties,proto3" json:"properties,omitempty"`
	// Resource type, e.g. "album:object".
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Resource identifier.
	Id            string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Resource) Reset() {
	*x = Resource{}
	mi := &file_cerbos_authzen_v1_authzen_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource) ProtoMessage() {}

func (x *Resource) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_authzen_v1_authzen_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource.ProtoReflect.Descriptor instead.
func (*Resource) Descriptor() ([]byte, []int) {
	return file_cerbos_authzen_v1_authzen_proto_rawDescGZIP(), []int{2}
}

func (x *Resource) GetProperties() *structpb.Struct {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *Resource) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Resource) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Tuple encapsulates a subject-action-resource tuple with optional context.
type Tuple struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Subject  *Subject               `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Action   *Action                `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	Resource *Resource              `protobuf:"bytes,3,opt,name=resource,proto3" json:"resource,omitempty"`
	// Evaluation context passed alongside the tuple.
	Context       *structpb.Struct `protobuf:"bytes,4,opt,name=context,proto3" json:"context,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Tuple) Reset() {
	*x = Tuple{}
	mi := &file_cerbos_authzen_v1_authzen_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tuple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tuple) ProtoMessage() {}

func (x *Tuple) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_authzen_v1_authzen_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tuple.ProtoReflect.Descriptor instead.
func (*Tuple) Descriptor() ([]byte, []int) {
	return file_cerbos_authzen_v1_authzen_proto_rawDescGZIP(), []int{3}
}

func (x *Tuple) GetSubject() *Subject {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *Tuple) GetAction() *Action {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *Tuple) GetResource() *Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *Tuple) GetContext() *structpb.Struct {
	if x != nil {
		return x.Context
	}
	return nil
}

// EvaluationRequest is the AuthZEN evaluation request.
// It supports a single tuple defined at the top level, or a batch via 'evaluations'.
type AccessEvaluationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Subject       *Subject               `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Action        *Action                `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	Resource      *Resource              `protobuf:"bytes,3,opt,name=resource,proto3" json:"resource,omitempty"`
	Context       *structpb.Struct       `protobuf:"bytes,4,opt,name=context,proto3" json:"context,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessEvaluationRequest) Reset() {
	*x = AccessEvaluationRequest{}
	mi := &file_cerbos_authzen_v1_authzen_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessEvaluationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessEvaluationRequest) ProtoMessage() {}

func (x *AccessEvaluationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_authzen_v1_authzen_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessEvaluationRequest.ProtoReflect.Descriptor instead.
func (*AccessEvaluationRequest) Descriptor() ([]byte, []int) {
	return file_cerbos_authzen_v1_authzen_proto_rawDescGZIP(), []int{4}
}

func (x *AccessEvaluationRequest) GetSubject() *Subject {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *AccessEvaluationRequest) GetAction() *Action {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *AccessEvaluationRequest) GetResource() *Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *AccessEvaluationRequest) GetContext() *structpb.Struct {
	if x != nil {
		return x.Context
	}
	return nil
}

// EvaluationsRequest is the batch request form for multiple tuples.
type AccessEvaluationsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Subject used for all evaluations unless overridden in a tuple.
	Subject *Subject `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	// Optional default context; tuple context overrides when set.
	Context *structpb.Struct `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
	// Optional default action; tuples may override.
	Action *Action `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	// Optional default resource; tuples may override.
	Resource *Resource `protobuf:"bytes,4,opt,name=resource,proto3" json:"resource,omitempty"`
	// The list of evaluations to perform.
	Evaluations []*Tuple `protobuf:"bytes,5,rep,name=evaluations,proto3" json:"evaluations,omitempty"`
	// Optional execution options applied to the batch request.
	Options       *AccessEvaluationsOptions `protobuf:"bytes,6,opt,name=options,proto3" json:"options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessEvaluationsRequest) Reset() {
	*x = AccessEvaluationsRequest{}
	mi := &file_cerbos_authzen_v1_authzen_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessEvaluationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessEvaluationsRequest) ProtoMessage() {}

func (x *AccessEvaluationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_authzen_v1_authzen_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessEvaluationsRequest.ProtoReflect.Descriptor instead.
func (*AccessEvaluationsRequest) Descriptor() ([]byte, []int) {
	return file_cerbos_authzen_v1_authzen_proto_rawDescGZIP(), []int{5}
}

func (x *AccessEvaluationsRequest) GetSubject() *Subject {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *AccessEvaluationsRequest) GetContext() *structpb.Struct {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *AccessEvaluationsRequest) GetAction() *Action {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *AccessEvaluationsRequest) GetResource() *Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *AccessEvaluationsRequest) GetEvaluations() []*Tuple {
	if x != nil {
		return x.Evaluations
	}
	return nil
}

func (x *AccessEvaluationsRequest) GetOptions() *AccessEvaluationsOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

// AccessEvaluationsOptions captures optional execution controls for batch requests.
type AccessEvaluationsOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Controls how the PDP should execute the evaluations array.
	EvaluationsSemantic string `protobuf:"bytes,1,opt,name=evaluations_semantic,json=evaluationsSemantic,proto3" json:"evaluations_semantic,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *AccessEvaluationsOptions) Reset() {
	*x = AccessEvaluationsOptions{}
	mi := &file_cerbos_authzen_v1_authzen_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessEvaluationsOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessEvaluationsOptions) ProtoMessage() {}

func (x *AccessEvaluationsOptions) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_authzen_v1_authzen_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessEvaluationsOptions.ProtoReflect.Descriptor instead.
func (*AccessEvaluationsOptions) Descriptor() ([]byte, []int) {
	return file_cerbos_authzen_v1_authzen_proto_rawDescGZIP(), []int{6}
}

func (x *AccessEvaluationsOptions) GetEvaluationsSemantic() string {
	if x != nil {
		return x.EvaluationsSemantic
	}
	return ""
}

// Decision contains the boolean decision and optional context (e.g. outputs).
type Decision struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Context       *structpb.Struct       `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Decision      bool                   `protobuf:"varint,2,opt,name=decision,proto3" json:"decision,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Decision) Reset() {
	*x = Decision{}
	mi := &file_cerbos_authzen_v1_authzen_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Decision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Decision) ProtoMessage() {}

func (x *Decision) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_authzen_v1_authzen_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Decision.ProtoReflect.Descriptor instead.
func (*Decision) Descriptor() ([]byte, []int) {
	return file_cerbos_authzen_v1_authzen_proto_rawDescGZIP(), []int{7}
}

func (x *Decision) GetContext() *structpb.Struct {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *Decision) GetDecision() bool {
	if x != nil {
		return x.Decision
	}
	return false
}

// EvaluationsResponse holds decisions for a batch request in request order.
type AccessEvaluationsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Evaluations   []*Decision            `protobuf:"bytes,1,rep,name=evaluations,proto3" json:"evaluations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessEvaluationsResponse) Reset() {
	*x = AccessEvaluationsResponse{}
	mi := &file_cerbos_authzen_v1_authzen_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessEvaluationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessEvaluationsResponse) ProtoMessage() {}

func (x *AccessEvaluationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_authzen_v1_authzen_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessEvaluationsResponse.ProtoReflect.Descriptor instead.
func (*AccessEvaluationsResponse) Descriptor() ([]byte, []int) {
	return file_cerbos_authzen_v1_authzen_proto_rawDescGZIP(), []int{8}
}

func (x *AccessEvaluationsResponse) GetEvaluations() []*Decision {
	if x != nil {
		return x.Evaluations
	}
	return nil
}

// GetMetadataResponse describes the AuthZEN translation layer endpoints and capabilities.
type GetMetadataResponse struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	PolicyDecisionPoint       string                 `protobuf:"bytes,1,opt,name=policy_decision_point,json=policyDecisionPoint,proto3" json:"policy_decision_point,omitempty"`
	AccessEvaluationEndpoint  string                 `protobuf:"bytes,2,opt,name=access_evaluation_endpoint,json=accessEvaluationEndpoint,proto3" json:"access_evaluation_endpoint,omitempty"`
	AccessEvaluationsEndpoint string                 `protobuf:"bytes,3,opt,name=access_evaluations_endpoint,json=accessEvaluationsEndpoint,proto3" json:"access_evaluations_endpoint,omitempty"`
	Capabilities              []string               `protobuf:"bytes,4,rep,name=capabilities,proto3" json:"capabilities,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *GetMetadataResponse) Reset() {
	*x = GetMetadataResponse{}
	mi := &file_cerbos_authzen_v1_authzen_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMetadataResponse) ProtoMessage() {}

func (x *GetMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_authzen_v1_authzen_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMetadataResponse.ProtoReflect.Descriptor instead.
func (*GetMetadataResponse) Descriptor() ([]byte, []int) {
	return file_cerbos_authzen_v1_authzen_proto_rawDescGZIP(), []int{9}
}

func (x *GetMetadataResponse) GetPolicyDecisionPoint() string {
	if x != nil {
		return x.PolicyDecisionPoint
	}
	return ""
}

func (x *GetMetadataResponse) GetAccessEvaluationEndpoint() string {
	if x != nil {
		return x.AccessEvaluationEndpoint
	}
	return ""
}

func (x *GetMetadataResponse) GetAccessEvaluationsEndpoint() string {
	if x != nil {
		return x.AccessEvaluationsEndpoint
	}
	return ""
}

func (x *GetMetadataResponse) GetCapabilities() []string {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

// Empty request for metadata discovery.
type GetMetadataRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMetadataRequest) Reset() {
	*x = GetMetadataRequest{}
	mi := &file_cerbos_authzen_v1_authzen_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMetadataRequest) ProtoMessage() {}

func (x *GetMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_authzen_v1_authzen_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMetadataRequest.ProtoReflect.Descriptor instead.
func (*GetMetadataRequest) Descriptor() ([]byte, []int) {
	return file_cerbos_authzen_v1_authzen_proto_rawDescGZIP(), []int{10}
}

// AccessEvaluationResponse mirrors Decision for RPC naming compliance.
type AccessEvaluationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Context       *structpb.Struct       `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Decision      bool                   `protobuf:"varint,2,opt,name=decision,proto3" json:"decision,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessEvaluationResponse) Reset() {
	*x = AccessEvaluationResponse{}
	mi := &file_cerbos_authzen_v1_authzen_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessEvaluationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessEvaluationResponse) ProtoMessage() {}

func (x *AccessEvaluationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_authzen_v1_authzen_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessEvaluationResponse.ProtoReflect.Descriptor instead.
func (*AccessEvaluationResponse) Descriptor() ([]byte, []int) {
	return file_cerbos_authzen_v1_authzen_proto_rawDescGZIP(), []int{11}
}

func (x *AccessEvaluationResponse) GetContext() *structpb.Struct {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *AccessEvaluationResponse) GetDecision() bool {
	if x != nil {
		return x.Decision
	}
	return false
}

var File_cerbos_authzen_v1_authzen_proto protoreflect.FileDescriptor

const file_cerbos_authzen_v1_authzen_proto_rawDesc = "" +
	"\n" +
	"\x1fcerbos/authzen/v1/authzen.proto\x12\x11cerbos.authzen.v1\x1a\x1bbuf/validate/validate.proto\x1a\x1cgoogle/api/annotations.proto\x1a\x1cgoogle/protobuf/struct.proto\x1a.protoc-gen-openapiv2/options/annotations.proto\"\x89\x02\n" +
	"\aSubject\x12u\n" +
	"\n" +
	"properties\x18\x01 \x01(\v2\x17.google.protobuf.StructB<\x92A927Arbitrary key-value properties attached to the subject.R\n" +
	"properties\x125\n" +
	"\x04type\x18\x02 \x01(\tB!\x92A\x172\rSubject type.J\x06\"user\"\xbaH\x04r\x02\x10\x01R\x04type\x128\n" +
	"\x02id\x18\x03 \x01(\tB(\x92A\x1e2\x13Subject identifier.J\a\"alice\"\xbaH\x04r\x02\x10\x01R\x02id:\x16\x92A\x13\n" +
	"\x112\x0fAuthZEN Subject\"\xd2\x01\n" +
	"\x06Action\x12t\n" +
	"\n" +
	"properties\x18\x01 \x01(\v2\x17.google.protobuf.StructB;\x92A826Arbitrary key-value properties attached to the action.R\n" +
	"properties\x12;\n" +
	"\x04name\x18\x02 \x01(\tB'\x92A\x1d2\fAction name.J\r\"view:public\"\xbaH\x04r\x02\x10\x01R\x04name:\x15\x92A\x12\n" +
	"\x102\x0eAuthZEN Action\"\x97\x02\n" +
	"\bResource\x12v\n" +
	"\n" +
	"properties\x18\x01 \x01(\v2\x17.google.protobuf.StructB=\x92A:28Arbitrary key-value properties attached to the resource.R\n" +
	"properties\x12?\n" +
	"\x04type\x18\x02 \x01(\tB+\x92A!2\x0eResource type.J\x0f\"leave_request\"\xbaH\x04r\x02\x10\x01R\x04type\x129\n" +
	"\x02id\x18\x03 \x01(\tB)\x92A\x1f2\x14Resource identifier.J\a\"XX125\"\xbaH\x04r\x02\x10\x01R\x02id:\x17\x92A\x14\n" +
	"\x122\x10AuthZEN Resource\"\xc9\x02\n" +
	"\x05Tuple\x124\n" +
	"\asubject\x18\x01 \x01(\v2\x1a.cerbos.authzen.v1.SubjectR\asubject\x121\n" +
	"\x06action\x18\x02 \x01(\v2\x19.cerbos.authzen.v1.ActionR\x06action\x127\n" +
	"\bresource\x18\x03 \x01(\v2\x1b.cerbos.authzen.v1.ResourceR\bresource\x12b\n" +
	"\acontext\x18\x04 \x01(\v2\x17.google.protobuf.StructB/\x92A,2*Contextual attributes for this evaluation.R\acontext::\x92A7\n" +
	"523Subject-Action-Resource tuple with optional context\"\x9e\x03\n" +
	"\x17AccessEvaluationRequest\x12U\n" +
	"\asubject\x18\x01 \x01(\v2\x1a.cerbos.authzen.v1.SubjectB\x1f\x92A\x162\x14Subject to evaluate.\xbaH\x03\xc8\x01\x01R\asubject\x12Q\n" +
	"\x06action\x18\x02 \x01(\v2\x19.cerbos.authzen.v1.ActionB\x1e\x92A\x152\x13Action to evaluate.\xbaH\x03\xc8\x01\x01R\x06action\x12Y\n" +
	"\bresource\x18\x03 \x01(\v2\x1b.cerbos.authzen.v1.ResourceB \x92A\x172\x15Resource to evaluate.\xbaH\x03\xc8\x01\x01R\bresource\x12T\n" +
	"\acontext\x18\x04 \x01(\v2\x17.google.protobuf.StructB!\x92A\x1e2\x1cOptional evaluation context.R\acontext:(\x92A%\n" +
	"#2!AuthZEN Access Evaluation request\"\xc4\n" +
	"\n" +
	"\x18AccessEvaluationsRequest\x12t\n" +
	"\asubject\x18\x01 \x01(\v2\x1a.cerbos.authzen.v1.SubjectB>\x92A;29Default subject for all evaluations; tuples may override.R\asubject\x12q\n" +
	"\acontext\x18\x02 \x01(\v2\x17.google.protobuf.StructB>\x92A;29Default context for all evaluations; tuples may override.R\acontext\x12p\n" +
	"\x06action\x18\x03 \x01(\v2\x19.cerbos.authzen.v1.ActionB=\x92A:28Default action for all evaluations; tuples may override.R\x06action\x12x\n" +
	"\bresource\x18\x04 \x01(\v2\x1b.cerbos.authzen.v1.ResourceB?\x92A<2:Default resource for all evaluations; tuples may override.R\bresource\x12r\n" +
	"\vevaluations\x18\x05 \x03(\v2\x18.cerbos.authzen.v1.TupleB6\x92A+2)Evaluations to perform (order preserved).\xbaH\x05\x92\x01\x02\b\x00R\vevaluations\x12t\n" +
	"\aoptions\x18\x06 \x01(\v2+.cerbos.authzen.v1.AccessEvaluationsOptionsB-\x92A*2(Execution options for the batch request.R\aoptions:\xe8\x04\x92A,\n" +
	"*2(AuthZEN Access Evaluations batch request\xbaH\xb5\x04\x1a\xb9\x01\n" +
	"\x16batch_requires_subject\x12BEach evaluation must have a subject via tuple or top-level default\x1a[size(this.evaluations) == 0 || this.evaluations.all(e, has(e.subject) || has(this.subject))\x1a\xb6\x01\n" +
	"\x15batch_requires_action\x12BEach evaluation must have an action via tuple or top-level default\x1aYsize(this.evaluations) == 0 || this.evaluations.all(e, has(e.action) || has(this.action))\x1a\xbd\x01\n" +
	"\x17batch_requires_resource\x12CEach evaluation must have a resource via tuple or top-level default\x1a]size(this.evaluations) == 0 || this.evaluations.all(e, has(e.resource) || has(this.resource))\"\xae\x02\n" +
	"\x18AccessEvaluationsOptions\x12\xd2\x01\n" +
	"\x14evaluations_semantic\x18\x01 \x01(\tB\x9e\x01\x92A[2CEvaluation semantic to apply. Defaults to \"execute_all\" when unset.J\x14\"deny_on_first_deny\"\xbaH=r;R\x00R\vexecute_allR\x12deny_on_first_denyR\x16permit_on_first_permitR\x13evaluationsSemantic:=\x92A:\n" +
	"826Optional execution controls for AuthZEN batch requests\"\xc9\x01\n" +
	"\bDecision\x12b\n" +
	"\acontext\x18\x01 \x01(\v2\x17.google.protobuf.StructB/\x92A,2*Optional decision context (e.g., outputs).R\acontext\x12@\n" +
	"\bdecision\x18\x02 \x01(\bB$\x92A!2\x1ftrue for allow, false for deny.R\bdecision:\x17\x92A\x14\n" +
	"\x122\x10AuthZEN decision\"\xbc\x01\n" +
	"\x19AccessEvaluationsResponse\x12v\n" +
	"\vevaluations\x18\x01 \x03(\v2\x1b.cerbos.authzen.v1.DecisionB7\x92A422Decisions in the same order as the request tuples.R\vevaluations:'\x92A$\n" +
	"\"2 AuthZEN batch decisions response\"\xde\x03\n" +
	"\x13GetMetadataResponse\x12e\n" +
	"\x15policy_decision_point\x18\x01 \x01(\tB1\x92A.2,Base URL of the Policy Decision Point (PDP).R\x13policyDecisionPoint\x12i\n" +
	"\x1aaccess_evaluation_endpoint\x18\x02 \x01(\tB+\x92A(2&URL of the Access Evaluation endpoint.R\x18accessEvaluationEndpoint\x12t\n" +
	"\x1baccess_evaluations_endpoint\x18\x03 \x01(\tB4\x92A12/URL of the Access Evaluations (batch) endpoint.R\x19accessEvaluationsEndpoint\x12S\n" +
	"\fcapabilities\x18\x04 \x03(\tB/\x92A,2*Array of URNs describing PDP capabilities.R\fcapabilities:*\x92A'\n" +
	"%2#AuthZEN metadata discovery document\"\x14\n" +
	"\x12GetMetadataRequest\"i\n" +
	"\x18AccessEvaluationResponse\x121\n" +
	"\acontext\x18\x01 \x01(\v2\x17.google.protobuf.StructR\acontext\x12\x1a\n" +
	"\bdecision\x18\x02 \x01(\bR\bdecision2\xda\x05\n" +
	"\x0eAuthZENService\x12\xdd\x01\n" +
	"\x10AccessEvaluation\x12*.cerbos.authzen.v1.AccessEvaluationRequest\x1a+.cerbos.authzen.v1.AccessEvaluationResponse\"p\x92AM\x12\x19AuthZEN Access Evaluation\x1a0Evaluate a single subject/action/resource tuple.\x82\xd3\xe4\x93\x02\x1a:\x01*\"\x15/access/v1/evaluation\x12\x99\x02\n" +
	"\x11AccessEvaluations\x12+.cerbos.authzen.v1.AccessEvaluationsRequest\x1a,.cerbos.authzen.v1.AccessEvaluationsResponse\"\xa8\x01\x92A\x83\x01\x12\x1aAuthZEN Access Evaluations\x1aeEvaluate multiple tuples with optional top-level defaults for subject, action, resource, and context.\x82\xd3\xe4\x93\x02\x1b:\x01*\"\x16/access/v1/evaluations\x12\xcb\x01\n" +
	"\vGetMetadata\x12%.cerbos.authzen.v1.GetMetadataRequest\x1a&.cerbos.authzen.v1.GetMetadataResponse\"m\x92A@\x12\x10AuthZEN Metadata\x1a,Discover AuthZEN endpoints and capabilities.\x82\xd3\xe4\x93\x02$\x12\"/.well-known/authzen-configurationBs\n" +
	"\x19dev.cerbos.api.v1.authzenZ>github.com/cerbos/cerbos/api/genpb/cerbos/authzen/v1;authzenv1\xaa\x02\x15Cerbos.Api.V1.Authzenb\x06proto3"

var (
	file_cerbos_authzen_v1_authzen_proto_rawDescOnce sync.Once
	file_cerbos_authzen_v1_authzen_proto_rawDescData []byte
)

func file_cerbos_authzen_v1_authzen_proto_rawDescGZIP() []byte {
	file_cerbos_authzen_v1_authzen_proto_rawDescOnce.Do(func() {
		file_cerbos_authzen_v1_authzen_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_cerbos_authzen_v1_authzen_proto_rawDesc), len(file_cerbos_authzen_v1_authzen_proto_rawDesc)))
	})
	return file_cerbos_authzen_v1_authzen_proto_rawDescData
}

var file_cerbos_authzen_v1_authzen_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_cerbos_authzen_v1_authzen_proto_goTypes = []any{
	(*Subject)(nil),                   // 0: cerbos.authzen.v1.Subject
	(*Action)(nil),                    // 1: cerbos.authzen.v1.Action
	(*Resource)(nil),                  // 2: cerbos.authzen.v1.Resource
	(*Tuple)(nil),                     // 3: cerbos.authzen.v1.Tuple
	(*AccessEvaluationRequest)(nil),   // 4: cerbos.authzen.v1.AccessEvaluationRequest
	(*AccessEvaluationsRequest)(nil),  // 5: cerbos.authzen.v1.AccessEvaluationsRequest
	(*AccessEvaluationsOptions)(nil),  // 6: cerbos.authzen.v1.AccessEvaluationsOptions
	(*Decision)(nil),                  // 7: cerbos.authzen.v1.Decision
	(*AccessEvaluationsResponse)(nil), // 8: cerbos.authzen.v1.AccessEvaluationsResponse
	(*GetMetadataResponse)(nil),       // 9: cerbos.authzen.v1.GetMetadataResponse
	(*GetMetadataRequest)(nil),        // 10: cerbos.authzen.v1.GetMetadataRequest
	(*AccessEvaluationResponse)(nil),  // 11: cerbos.authzen.v1.AccessEvaluationResponse
	(*structpb.Struct)(nil),           // 12: google.protobuf.Struct
}
var file_cerbos_authzen_v1_authzen_proto_depIdxs = []int32{
	12, // 0: cerbos.authzen.v1.Subject.properties:type_name -> google.protobuf.Struct
	12, // 1: cerbos.authzen.v1.Action.properties:type_name -> google.protobuf.Struct
	12, // 2: cerbos.authzen.v1.Resource.properties:type_name -> google.protobuf.Struct
	0,  // 3: cerbos.authzen.v1.Tuple.subject:type_name -> cerbos.authzen.v1.Subject
	1,  // 4: cerbos.authzen.v1.Tuple.action:type_name -> cerbos.authzen.v1.Action
	2,  // 5: cerbos.authzen.v1.Tuple.resource:type_name -> cerbos.authzen.v1.Resource
	12, // 6: cerbos.authzen.v1.Tuple.context:type_name -> google.protobuf.Struct
	0,  // 7: cerbos.authzen.v1.AccessEvaluationRequest.subject:type_name -> cerbos.authzen.v1.Subject
	1,  // 8: cerbos.authzen.v1.AccessEvaluationRequest.action:type_name -> cerbos.authzen.v1.Action
	2,  // 9: cerbos.authzen.v1.AccessEvaluationRequest.resource:type_name -> cerbos.authzen.v1.Resource
	12, // 10: cerbos.authzen.v1.AccessEvaluationRequest.context:type_name -> google.protobuf.Struct
	0,  // 11: cerbos.authzen.v1.AccessEvaluationsRequest.subject:type_name -> cerbos.authzen.v1.Subject
	12, // 12: cerbos.authzen.v1.AccessEvaluationsRequest.context:type_name -> google.protobuf.Struct
	1,  // 13: cerbos.authzen.v1.AccessEvaluationsRequest.action:type_name -> cerbos.authzen.v1.Action
	2,  // 14: cerbos.authzen.v1.AccessEvaluationsRequest.resource:type_name -> cerbos.authzen.v1.Resource
	3,  // 15: cerbos.authzen.v1.AccessEvaluationsRequest.evaluations:type_name -> cerbos.authzen.v1.Tuple
	6,  // 16: cerbos.authzen.v1.AccessEvaluationsRequest.options:type_name -> cerbos.authzen.v1.AccessEvaluationsOptions
	12, // 17: cerbos.authzen.v1.Decision.context:type_name -> google.protobuf.Struct
	7,  // 18: cerbos.authzen.v1.AccessEvaluationsResponse.evaluations:type_name -> cerbos.authzen.v1.Decision
	12, // 19: cerbos.authzen.v1.AccessEvaluationResponse.context:type_name -> google.protobuf.Struct
	4,  // 20: cerbos.authzen.v1.AuthZENService.AccessEvaluation:input_type -> cerbos.authzen.v1.AccessEvaluationRequest
	5,  // 21: cerbos.authzen.v1.AuthZENService.AccessEvaluations:input_type -> cerbos.authzen.v1.AccessEvaluationsRequest
	10, // 22: cerbos.authzen.v1.AuthZENService.GetMetadata:input_type -> cerbos.authzen.v1.GetMetadataRequest
	11, // 23: cerbos.authzen.v1.AuthZENService.AccessEvaluation:output_type -> cerbos.authzen.v1.AccessEvaluationResponse
	8,  // 24: cerbos.authzen.v1.AuthZENService.AccessEvaluations:output_type -> cerbos.authzen.v1.AccessEvaluationsResponse
	9,  // 25: cerbos.authzen.v1.AuthZENService.GetMetadata:output_type -> cerbos.authzen.v1.GetMetadataResponse
	23, // [23:26] is the sub-list for method output_type
	20, // [20:23] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_cerbos_authzen_v1_authzen_proto_init() }
func file_cerbos_authzen_v1_authzen_proto_init() {
	if File_cerbos_authzen_v1_authzen_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_cerbos_authzen_v1_authzen_proto_rawDesc), len(file_cerbos_authzen_v1_authzen_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cerbos_authzen_v1_authzen_proto_goTypes,
		DependencyIndexes: file_cerbos_authzen_v1_authzen_proto_depIdxs,
		MessageInfos:      file_cerbos_authzen_v1_authzen_proto_msgTypes,
	}.Build()
	File_cerbos_authzen_v1_authzen_proto = out.File
	file_cerbos_authzen_v1_authzen_proto_goTypes = nil
	file_cerbos_authzen_v1_authzen_proto_depIdxs = nil
}
