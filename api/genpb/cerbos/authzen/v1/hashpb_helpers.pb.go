// Code generated by protoc-gen-go-hashpb. DO NOT EDIT.
// protoc-gen-go-hashpb v0.4.2

package authzenv1

import (
	protowire "google.golang.org/protobuf/encoding/protowire"
	structpb "google.golang.org/protobuf/types/known/structpb"
	hash "hash"
	maps "maps"
	math "math"
	slices "slices"
	unsafe "unsafe"
)

func cerbos_authzen_v1_AccessEvaluationRequest_hashpb_sum(m *AccessEvaluationRequest, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.authzen.v1.AccessEvaluationRequest.subject"]; !ok {
		if m.GetSubject() != nil {
			cerbos_authzen_v1_Subject_hashpb_sum(m.GetSubject(), hasher, ignore)
		}
	}
	if _, ok := ignore["cerbos.authzen.v1.AccessEvaluationRequest.action"]; !ok {
		if m.GetAction() != nil {
			cerbos_authzen_v1_Action_hashpb_sum(m.GetAction(), hasher, ignore)
		}
	}
	if _, ok := ignore["cerbos.authzen.v1.AccessEvaluationRequest.resource"]; !ok {
		if m.GetResource() != nil {
			cerbos_authzen_v1_Resource_hashpb_sum(m.GetResource(), hasher, ignore)
		}
	}
	if _, ok := ignore["cerbos.authzen.v1.AccessEvaluationRequest.context"]; !ok {
		if m.GetContext() != nil {
			google_protobuf_Struct_hashpb_sum(m.GetContext(), hasher, ignore)
		}
	}
}

func cerbos_authzen_v1_AccessEvaluationResponse_hashpb_sum(m *AccessEvaluationResponse, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.authzen.v1.AccessEvaluationResponse.context"]; !ok {
		if m.GetContext() != nil {
			google_protobuf_Struct_hashpb_sum(m.GetContext(), hasher, ignore)
		}
	}
	if _, ok := ignore["cerbos.authzen.v1.AccessEvaluationResponse.decision"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, protowire.EncodeBool(m.GetDecision())))
	}
}

func cerbos_authzen_v1_AccessEvaluationsRequest_hashpb_sum(m *AccessEvaluationsRequest, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.authzen.v1.AccessEvaluationsRequest.subject"]; !ok {
		if m.GetSubject() != nil {
			cerbos_authzen_v1_Subject_hashpb_sum(m.GetSubject(), hasher, ignore)
		}
	}
	if _, ok := ignore["cerbos.authzen.v1.AccessEvaluationsRequest.context"]; !ok {
		if m.GetContext() != nil {
			google_protobuf_Struct_hashpb_sum(m.GetContext(), hasher, ignore)
		}
	}
	if _, ok := ignore["cerbos.authzen.v1.AccessEvaluationsRequest.action"]; !ok {
		if m.GetAction() != nil {
			cerbos_authzen_v1_Action_hashpb_sum(m.GetAction(), hasher, ignore)
		}
	}
	if _, ok := ignore["cerbos.authzen.v1.AccessEvaluationsRequest.resource"]; !ok {
		if m.GetResource() != nil {
			cerbos_authzen_v1_Resource_hashpb_sum(m.GetResource(), hasher, ignore)
		}
	}
	if _, ok := ignore["cerbos.authzen.v1.AccessEvaluationsRequest.evaluations"]; !ok {
		if len(m.Evaluations) > 0 {
			for _, v := range m.Evaluations {
				if v != nil {
					cerbos_authzen_v1_Tuple_hashpb_sum(v, hasher, ignore)
				}
			}
		}
	}
}

func cerbos_authzen_v1_AccessEvaluationsResponse_hashpb_sum(m *AccessEvaluationsResponse, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.authzen.v1.AccessEvaluationsResponse.evaluations"]; !ok {
		if len(m.Evaluations) > 0 {
			for _, v := range m.Evaluations {
				if v != nil {
					cerbos_authzen_v1_Decision_hashpb_sum(v, hasher, ignore)
				}
			}
		}
	}
}

func cerbos_authzen_v1_Action_hashpb_sum(m *Action, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.authzen.v1.Action.properties"]; !ok {
		if m.GetProperties() != nil {
			google_protobuf_Struct_hashpb_sum(m.GetProperties(), hasher, ignore)
		}
	}
	if _, ok := ignore["cerbos.authzen.v1.Action.name"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(len(m.GetName()))))
		_, _ = hasher.Write(unsafe.Slice(unsafe.StringData(m.GetName()), len(m.GetName())))
	}
}

func cerbos_authzen_v1_Decision_hashpb_sum(m *Decision, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.authzen.v1.Decision.context"]; !ok {
		if m.GetContext() != nil {
			google_protobuf_Struct_hashpb_sum(m.GetContext(), hasher, ignore)
		}
	}
	if _, ok := ignore["cerbos.authzen.v1.Decision.decision"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, protowire.EncodeBool(m.GetDecision())))
	}
}

func cerbos_authzen_v1_GetMetadataRequest_hashpb_sum(m *GetMetadataRequest, hasher hash.Hash, ignore map[string]struct{}) {
}

func cerbos_authzen_v1_GetMetadataResponse_hashpb_sum(m *GetMetadataResponse, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.authzen.v1.GetMetadataResponse.policy_decision_point"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(len(m.GetPolicyDecisionPoint()))))
		_, _ = hasher.Write(unsafe.Slice(unsafe.StringData(m.GetPolicyDecisionPoint()), len(m.GetPolicyDecisionPoint())))
	}
	if _, ok := ignore["cerbos.authzen.v1.GetMetadataResponse.access_evaluation_endpoint"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(len(m.GetAccessEvaluationEndpoint()))))
		_, _ = hasher.Write(unsafe.Slice(unsafe.StringData(m.GetAccessEvaluationEndpoint()), len(m.GetAccessEvaluationEndpoint())))
	}
	if _, ok := ignore["cerbos.authzen.v1.GetMetadataResponse.access_evaluations_endpoint"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(len(m.GetAccessEvaluationsEndpoint()))))
		_, _ = hasher.Write(unsafe.Slice(unsafe.StringData(m.GetAccessEvaluationsEndpoint()), len(m.GetAccessEvaluationsEndpoint())))
	}
	if _, ok := ignore["cerbos.authzen.v1.GetMetadataResponse.capabilities"]; !ok {
		if len(m.Capabilities) > 0 {
			for _, v := range m.Capabilities {
				_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(len(v))))
				_, _ = hasher.Write(unsafe.Slice(unsafe.StringData(v), len(v)))
			}
		}
	}
}

func cerbos_authzen_v1_Resource_hashpb_sum(m *Resource, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.authzen.v1.Resource.properties"]; !ok {
		if m.GetProperties() != nil {
			google_protobuf_Struct_hashpb_sum(m.GetProperties(), hasher, ignore)
		}
	}
	if _, ok := ignore["cerbos.authzen.v1.Resource.type"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(len(m.GetType()))))
		_, _ = hasher.Write(unsafe.Slice(unsafe.StringData(m.GetType()), len(m.GetType())))
	}
	if _, ok := ignore["cerbos.authzen.v1.Resource.id"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(len(m.GetId()))))
		_, _ = hasher.Write(unsafe.Slice(unsafe.StringData(m.GetId()), len(m.GetId())))
	}
}

func cerbos_authzen_v1_Subject_hashpb_sum(m *Subject, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.authzen.v1.Subject.properties"]; !ok {
		if m.GetProperties() != nil {
			google_protobuf_Struct_hashpb_sum(m.GetProperties(), hasher, ignore)
		}
	}
	if _, ok := ignore["cerbos.authzen.v1.Subject.type"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(len(m.GetType()))))
		_, _ = hasher.Write(unsafe.Slice(unsafe.StringData(m.GetType()), len(m.GetType())))
	}
	if _, ok := ignore["cerbos.authzen.v1.Subject.id"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(len(m.GetId()))))
		_, _ = hasher.Write(unsafe.Slice(unsafe.StringData(m.GetId()), len(m.GetId())))
	}
}

func cerbos_authzen_v1_Tuple_hashpb_sum(m *Tuple, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.authzen.v1.Tuple.subject"]; !ok {
		if m.GetSubject() != nil {
			cerbos_authzen_v1_Subject_hashpb_sum(m.GetSubject(), hasher, ignore)
		}
	}
	if _, ok := ignore["cerbos.authzen.v1.Tuple.action"]; !ok {
		if m.GetAction() != nil {
			cerbos_authzen_v1_Action_hashpb_sum(m.GetAction(), hasher, ignore)
		}
	}
	if _, ok := ignore["cerbos.authzen.v1.Tuple.resource"]; !ok {
		if m.GetResource() != nil {
			cerbos_authzen_v1_Resource_hashpb_sum(m.GetResource(), hasher, ignore)
		}
	}
	if _, ok := ignore["cerbos.authzen.v1.Tuple.context"]; !ok {
		if m.GetContext() != nil {
			google_protobuf_Struct_hashpb_sum(m.GetContext(), hasher, ignore)
		}
	}
}

func google_protobuf_ListValue_hashpb_sum(m *structpb.ListValue, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["google.protobuf.ListValue.values"]; !ok {
		if len(m.Values) > 0 {
			for _, v := range m.Values {
				if v != nil {
					google_protobuf_Value_hashpb_sum(v, hasher, ignore)
				}
			}
		}
	}
}

func google_protobuf_Struct_hashpb_sum(m *structpb.Struct, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["google.protobuf.Struct.fields"]; !ok {
		if len(m.Fields) > 0 {
			for _, k := range slices.Sorted(maps.Keys(m.Fields)) {
				_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(len(k))))
				_, _ = hasher.Write(unsafe.Slice(unsafe.StringData(k), len(k)))
				if m.Fields[k] != nil {
					google_protobuf_Value_hashpb_sum(m.Fields[k], hasher, ignore)
				}
			}
		}
	}
}

func google_protobuf_Value_hashpb_sum(m *structpb.Value, hasher hash.Hash, ignore map[string]struct{}) {
	if m.Kind != nil {
		if _, ok := ignore["google.protobuf.Value.kind"]; !ok {
			switch t := m.Kind.(type) {
			case *structpb.Value_NullValue:
				_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(t.NullValue)))
			case *structpb.Value_NumberValue:
				_, _ = hasher.Write(protowire.AppendFixed64(nil, math.Float64bits(t.NumberValue)))
			case *structpb.Value_StringValue:
				_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(len(t.StringValue))))
				_, _ = hasher.Write(unsafe.Slice(unsafe.StringData(t.StringValue), len(t.StringValue)))
			case *structpb.Value_BoolValue:
				_, _ = hasher.Write(protowire.AppendVarint(nil, protowire.EncodeBool(t.BoolValue)))
			case *structpb.Value_StructValue:
				if t.StructValue != nil {
					google_protobuf_Struct_hashpb_sum(t.StructValue, hasher, ignore)
				}
			case *structpb.Value_ListValue:
				if t.ListValue != nil {
					google_protobuf_ListValue_hashpb_sum(t.ListValue, hasher, ignore)
				}
			}
		}
	}
}
