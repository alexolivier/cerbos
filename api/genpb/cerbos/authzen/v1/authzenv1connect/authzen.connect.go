// Copyright 2021-2025 Zenauth Ltd.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cerbos/authzen/v1/authzen.proto

package authzenv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/cerbos/cerbos/api/genpb/cerbos/authzen/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuthZENServiceName is the fully-qualified name of the AuthZENService service.
	AuthZENServiceName = "cerbos.authzen.v1.AuthZENService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthZENServiceAccessEvaluationProcedure is the fully-qualified name of the AuthZENService's
	// AccessEvaluation RPC.
	AuthZENServiceAccessEvaluationProcedure = "/cerbos.authzen.v1.AuthZENService/AccessEvaluation"
	// AuthZENServiceAccessEvaluationsProcedure is the fully-qualified name of the AuthZENService's
	// AccessEvaluations RPC.
	AuthZENServiceAccessEvaluationsProcedure = "/cerbos.authzen.v1.AuthZENService/AccessEvaluations"
	// AuthZENServiceGetMetadataProcedure is the fully-qualified name of the AuthZENService's
	// GetMetadata RPC.
	AuthZENServiceGetMetadataProcedure = "/cerbos.authzen.v1.AuthZENService/GetMetadata"
)

// AuthZENServiceClient is a client for the cerbos.authzen.v1.AuthZENService service.
type AuthZENServiceClient interface {
	// AccessEvaluation evaluates a single subject/action/resource tuple.
	AccessEvaluation(context.Context, *connect.Request[v1.AccessEvaluationRequest]) (*connect.Response[v1.AccessEvaluationResponse], error)
	// AccessEvaluations evaluates multiple tuples (boxcarred request).
	AccessEvaluations(context.Context, *connect.Request[v1.AccessEvaluationsRequest]) (*connect.Response[v1.AccessEvaluationsResponse], error)
	// GetMetadata returns the metadata discovery document.
	GetMetadata(context.Context, *connect.Request[v1.GetMetadataRequest]) (*connect.Response[v1.GetMetadataResponse], error)
}

// NewAuthZENServiceClient constructs a client for the cerbos.authzen.v1.AuthZENService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthZENServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthZENServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	authZENServiceMethods := v1.File_cerbos_authzen_v1_authzen_proto.Services().ByName("AuthZENService").Methods()
	return &authZENServiceClient{
		accessEvaluation: connect.NewClient[v1.AccessEvaluationRequest, v1.AccessEvaluationResponse](
			httpClient,
			baseURL+AuthZENServiceAccessEvaluationProcedure,
			connect.WithSchema(authZENServiceMethods.ByName("AccessEvaluation")),
			connect.WithClientOptions(opts...),
		),
		accessEvaluations: connect.NewClient[v1.AccessEvaluationsRequest, v1.AccessEvaluationsResponse](
			httpClient,
			baseURL+AuthZENServiceAccessEvaluationsProcedure,
			connect.WithSchema(authZENServiceMethods.ByName("AccessEvaluations")),
			connect.WithClientOptions(opts...),
		),
		getMetadata: connect.NewClient[v1.GetMetadataRequest, v1.GetMetadataResponse](
			httpClient,
			baseURL+AuthZENServiceGetMetadataProcedure,
			connect.WithSchema(authZENServiceMethods.ByName("GetMetadata")),
			connect.WithClientOptions(opts...),
		),
	}
}

// authZENServiceClient implements AuthZENServiceClient.
type authZENServiceClient struct {
	accessEvaluation  *connect.Client[v1.AccessEvaluationRequest, v1.AccessEvaluationResponse]
	accessEvaluations *connect.Client[v1.AccessEvaluationsRequest, v1.AccessEvaluationsResponse]
	getMetadata       *connect.Client[v1.GetMetadataRequest, v1.GetMetadataResponse]
}

// AccessEvaluation calls cerbos.authzen.v1.AuthZENService.AccessEvaluation.
func (c *authZENServiceClient) AccessEvaluation(ctx context.Context, req *connect.Request[v1.AccessEvaluationRequest]) (*connect.Response[v1.AccessEvaluationResponse], error) {
	return c.accessEvaluation.CallUnary(ctx, req)
}

// AccessEvaluations calls cerbos.authzen.v1.AuthZENService.AccessEvaluations.
func (c *authZENServiceClient) AccessEvaluations(ctx context.Context, req *connect.Request[v1.AccessEvaluationsRequest]) (*connect.Response[v1.AccessEvaluationsResponse], error) {
	return c.accessEvaluations.CallUnary(ctx, req)
}

// GetMetadata calls cerbos.authzen.v1.AuthZENService.GetMetadata.
func (c *authZENServiceClient) GetMetadata(ctx context.Context, req *connect.Request[v1.GetMetadataRequest]) (*connect.Response[v1.GetMetadataResponse], error) {
	return c.getMetadata.CallUnary(ctx, req)
}

// AuthZENServiceHandler is an implementation of the cerbos.authzen.v1.AuthZENService service.
type AuthZENServiceHandler interface {
	// AccessEvaluation evaluates a single subject/action/resource tuple.
	AccessEvaluation(context.Context, *connect.Request[v1.AccessEvaluationRequest]) (*connect.Response[v1.AccessEvaluationResponse], error)
	// AccessEvaluations evaluates multiple tuples (boxcarred request).
	AccessEvaluations(context.Context, *connect.Request[v1.AccessEvaluationsRequest]) (*connect.Response[v1.AccessEvaluationsResponse], error)
	// GetMetadata returns the metadata discovery document.
	GetMetadata(context.Context, *connect.Request[v1.GetMetadataRequest]) (*connect.Response[v1.GetMetadataResponse], error)
}

// NewAuthZENServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthZENServiceHandler(svc AuthZENServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authZENServiceMethods := v1.File_cerbos_authzen_v1_authzen_proto.Services().ByName("AuthZENService").Methods()
	authZENServiceAccessEvaluationHandler := connect.NewUnaryHandler(
		AuthZENServiceAccessEvaluationProcedure,
		svc.AccessEvaluation,
		connect.WithSchema(authZENServiceMethods.ByName("AccessEvaluation")),
		connect.WithHandlerOptions(opts...),
	)
	authZENServiceAccessEvaluationsHandler := connect.NewUnaryHandler(
		AuthZENServiceAccessEvaluationsProcedure,
		svc.AccessEvaluations,
		connect.WithSchema(authZENServiceMethods.ByName("AccessEvaluations")),
		connect.WithHandlerOptions(opts...),
	)
	authZENServiceGetMetadataHandler := connect.NewUnaryHandler(
		AuthZENServiceGetMetadataProcedure,
		svc.GetMetadata,
		connect.WithSchema(authZENServiceMethods.ByName("GetMetadata")),
		connect.WithHandlerOptions(opts...),
	)
	return "/cerbos.authzen.v1.AuthZENService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthZENServiceAccessEvaluationProcedure:
			authZENServiceAccessEvaluationHandler.ServeHTTP(w, r)
		case AuthZENServiceAccessEvaluationsProcedure:
			authZENServiceAccessEvaluationsHandler.ServeHTTP(w, r)
		case AuthZENServiceGetMetadataProcedure:
			authZENServiceGetMetadataHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthZENServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthZENServiceHandler struct{}

func (UnimplementedAuthZENServiceHandler) AccessEvaluation(context.Context, *connect.Request[v1.AccessEvaluationRequest]) (*connect.Response[v1.AccessEvaluationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cerbos.authzen.v1.AuthZENService.AccessEvaluation is not implemented"))
}

func (UnimplementedAuthZENServiceHandler) AccessEvaluations(context.Context, *connect.Request[v1.AccessEvaluationsRequest]) (*connect.Response[v1.AccessEvaluationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cerbos.authzen.v1.AuthZENService.AccessEvaluations is not implemented"))
}

func (UnimplementedAuthZENServiceHandler) GetMetadata(context.Context, *connect.Request[v1.GetMetadataRequest]) (*connect.Response[v1.GetMetadataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cerbos.authzen.v1.AuthZENService.GetMetadata is not implemented"))
}
