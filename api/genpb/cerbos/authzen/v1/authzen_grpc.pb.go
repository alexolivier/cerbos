// Copyright 2021-2025 Zenauth Ltd.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: cerbos/authzen/v1/authzen.proto

package authzenv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuthZENService_AccessEvaluation_FullMethodName  = "/cerbos.authzen.v1.AuthZENService/AccessEvaluation"
	AuthZENService_AccessEvaluations_FullMethodName = "/cerbos.authzen.v1.AuthZENService/AccessEvaluations"
	AuthZENService_GetMetadata_FullMethodName       = "/cerbos.authzen.v1.AuthZENService/GetMetadata"
)

// AuthZENServiceClient is the client API for AuthZENService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AuthZENService exposes the AuthZEN HTTP API via gRPC + grpc-gateway.
type AuthZENServiceClient interface {
	// AccessEvaluation evaluates a single subject/action/resource tuple.
	AccessEvaluation(ctx context.Context, in *AccessEvaluationRequest, opts ...grpc.CallOption) (*AccessEvaluationResponse, error)
	// AccessEvaluations evaluates multiple tuples (boxcarred request).
	AccessEvaluations(ctx context.Context, in *AccessEvaluationsRequest, opts ...grpc.CallOption) (*AccessEvaluationsResponse, error)
	// GetMetadata returns the metadata discovery document.
	GetMetadata(ctx context.Context, in *GetMetadataRequest, opts ...grpc.CallOption) (*GetMetadataResponse, error)
}

type authZENServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthZENServiceClient(cc grpc.ClientConnInterface) AuthZENServiceClient {
	return &authZENServiceClient{cc}
}

func (c *authZENServiceClient) AccessEvaluation(ctx context.Context, in *AccessEvaluationRequest, opts ...grpc.CallOption) (*AccessEvaluationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccessEvaluationResponse)
	err := c.cc.Invoke(ctx, AuthZENService_AccessEvaluation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authZENServiceClient) AccessEvaluations(ctx context.Context, in *AccessEvaluationsRequest, opts ...grpc.CallOption) (*AccessEvaluationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccessEvaluationsResponse)
	err := c.cc.Invoke(ctx, AuthZENService_AccessEvaluations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authZENServiceClient) GetMetadata(ctx context.Context, in *GetMetadataRequest, opts ...grpc.CallOption) (*GetMetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMetadataResponse)
	err := c.cc.Invoke(ctx, AuthZENService_GetMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthZENServiceServer is the server API for AuthZENService service.
// All implementations must embed UnimplementedAuthZENServiceServer
// for forward compatibility.
//
// AuthZENService exposes the AuthZEN HTTP API via gRPC + grpc-gateway.
type AuthZENServiceServer interface {
	// AccessEvaluation evaluates a single subject/action/resource tuple.
	AccessEvaluation(context.Context, *AccessEvaluationRequest) (*AccessEvaluationResponse, error)
	// AccessEvaluations evaluates multiple tuples (boxcarred request).
	AccessEvaluations(context.Context, *AccessEvaluationsRequest) (*AccessEvaluationsResponse, error)
	// GetMetadata returns the metadata discovery document.
	GetMetadata(context.Context, *GetMetadataRequest) (*GetMetadataResponse, error)
	mustEmbedUnimplementedAuthZENServiceServer()
}

// UnimplementedAuthZENServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthZENServiceServer struct{}

func (UnimplementedAuthZENServiceServer) AccessEvaluation(context.Context, *AccessEvaluationRequest) (*AccessEvaluationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccessEvaluation not implemented")
}
func (UnimplementedAuthZENServiceServer) AccessEvaluations(context.Context, *AccessEvaluationsRequest) (*AccessEvaluationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccessEvaluations not implemented")
}
func (UnimplementedAuthZENServiceServer) GetMetadata(context.Context, *GetMetadataRequest) (*GetMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadata not implemented")
}
func (UnimplementedAuthZENServiceServer) mustEmbedUnimplementedAuthZENServiceServer() {}
func (UnimplementedAuthZENServiceServer) testEmbeddedByValue()                        {}

// UnsafeAuthZENServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthZENServiceServer will
// result in compilation errors.
type UnsafeAuthZENServiceServer interface {
	mustEmbedUnimplementedAuthZENServiceServer()
}

func RegisterAuthZENServiceServer(s grpc.ServiceRegistrar, srv AuthZENServiceServer) {
	// If the following call pancis, it indicates UnimplementedAuthZENServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthZENService_ServiceDesc, srv)
}

func _AuthZENService_AccessEvaluation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessEvaluationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthZENServiceServer).AccessEvaluation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthZENService_AccessEvaluation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthZENServiceServer).AccessEvaluation(ctx, req.(*AccessEvaluationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthZENService_AccessEvaluations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessEvaluationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthZENServiceServer).AccessEvaluations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthZENService_AccessEvaluations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthZENServiceServer).AccessEvaluations(ctx, req.(*AccessEvaluationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthZENService_GetMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthZENServiceServer).GetMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthZENService_GetMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthZENServiceServer).GetMetadata(ctx, req.(*GetMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthZENService_ServiceDesc is the grpc.ServiceDesc for AuthZENService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthZENService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cerbos.authzen.v1.AuthZENService",
	HandlerType: (*AuthZENServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AccessEvaluation",
			Handler:    _AuthZENService_AccessEvaluation_Handler,
		},
		{
			MethodName: "AccessEvaluations",
			Handler:    _AuthZENService_AccessEvaluations_Handler,
		},
		{
			MethodName: "GetMetadata",
			Handler:    _AuthZENService_GetMetadata_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cerbos/authzen/v1/authzen.proto",
}
